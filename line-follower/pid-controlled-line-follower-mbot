#include <Arduino.h>
#include <Wire.h>
#include <SoftwareSerial.h>

#include <MeMCore.h>

MeDCMotor motor1(9);
MeDCMotor motor2(10);		
MeLineFollower lineFollower(2);
		
double Kp;
double Ki;
double Kd;
double targetError;
double targetSpeed;
double proportion;
double integral;
double derivative;
double lastError;
double currentError;
double currentLFState;
double randomInt;
double turn;
double speedMotor1;
double speedMotor2;

void setup() 
{
    Kp = 10;
    Ki = 2;
    Kd = 3;
    targetError = 0;
    targetSpeed = 200;
    proportion = 0;
    integral = 0;
    derivative = 0;
    lastError = 0;
}

void loop() 
{
    currentLFState = lineFollower.readSensors();
		
    if ((currentLFState)==(0))
		{
        currentError = 0;
    } 
		else if ((currentLFState)==(1))
		{
        currentError = -1;
    } 
		else if ((currentLFState)==(2))
		{
        currentError = 1;
    } 
		else if ((currentLFState)==(3)) 
		{
        if ((lastError)==(1)) 
				{
            currentError = 2;
        } 
				else if ((lastError)==(-1)) 
				{
            currentError = -2;
        } 
				else if ((lastError)==(0)) 
				{
            motor1.run((9)==M1?-(0):(0));
            motor2.run((10)==M1?-(0):(0));
						_delay(0.5)
						
            randomInt = random(1,2);
						
            while ((currentLFState)==(3))
            {
                _loop();
                if ((randomInt)==(1))
                {
                    motor1.run((9)==M1?-(255):(255));
                    motor2.run((10)==M1?-(-255):(-255));
                }
                else
                {
                    motor1.run((9)==M1?-(-255):(-255));
                    motor2.run((10)==M1?-(255):(255));
                }
            }
        }
    }
    
    proportion = (currentError) - (targetError)
		
    if ((proportion) = (targetError))
    {
      lastError = 0;
      integral = 0;
      derivative = 0;
    }
		
    integral = (integral) + (proportion);
    derivative = (proportion) - (lastError);
    turn = ((Kp) * (proportion)) + ((Ki) * (integral)) + ((Kd) * (derivative));
		
    speedMotor1 = (targetSpeed) + (turn);
    speedMotor2 = (targetSpeed) - (turn);
		
    if ((speedMotor1) > (255))
    {
        speedMotor1 = 255;
    }
    else if ((speedMotor1) < (-255))
    {
        speedMotor1 = -255;
    }
    
    if ((speedMotor2) > (255))
    {
        speedMotor2 = 255;
    }
    else if ((speedMotor2) < (-255))
    {
        speedMotor2 = -255;
    }
    
    motor1.run((9)==M1?-(speedMotor1):(speedMotor1));
    motor2.run((10)==M1?-(speedMotor2):(speedMotor2));
		
    lastError = proportion;
		
    _loop(); 
}

void _delay(float seconds)
{
    long endTime = millis() + seconds * 1000;
    while(millis() < endTime)_loop();
}
    
void _loop()
{
		
}
